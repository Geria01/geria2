Goal

Rebuild the Geria Blog Page using a modern, responsive, and user-friendly tech stack. The blog must be visually aligned with Geriaâ€™s branding, easy to manage by non-technical users, and support full content editing, sharing, and media uploads.

â¸»

âœ… Core Features & Requirements

1. Branding
	â€¢	Use Geriaâ€™s design system (colors, fonts, logos, and spacing) for consistency.
	â€¢	Match visual styling to existing Geria website.

2. Responsive Design
	â€¢	Fully responsive across devices (mobile-first approach).
	â€¢	Use CSS Grid/Flexbox with media queries or a utility-first framework like Tailwind CSS.

3. Blog Post Functionality

Each blog post should support:
	â€¢	Title
	â€¢	Author
	â€¢	Publish date
	â€¢	Thumbnail image
	â€¢	Body content (text, images, embedded media)
	â€¢	Tags / Categories
	â€¢	Estimated read time

4. Social Media Sharing
	â€¢	Add share icons (Facebook, Twitter/X, LinkedIn, WhatsApp, Email).
	â€¢	Share includes post link, title, and preview image.

5. Admin Management (No-Code UI)
	â€¢	Build a simple CMS dashboard for internal team to:
	â€¢	Create/edit/delete posts
	â€¢	Upload and manage images (thumbnail + inline)
	â€¢	Assign categories or tags
	â€¢	Use a WYSIWYG (What You See Is What You Get) editor like:
	â€¢	Editor.js
	â€¢	TipTap
	â€¢	Or integrate Sanity.io, Strapi, or Contentful as a headless CMS
	â€¢	Login authentication for admin (email/password or Google login)

6. Image Upload Support
	â€¢	Upload images via dashboard (drag-and-drop)
	â€¢	Image compression and optimization before upload
	â€¢	Store via:
	â€¢	Local storage (for dev)
	â€¢	Cloud storage like Cloudinary, Firebase, or S3 in production

7. Search & Filter
	â€¢	Add a simple search bar to filter blog posts by keyword
	â€¢	Filter by category or tag

8. SEO-Friendly
	â€¢	Each post should:
	â€¢	Have a clean URL slug (e.g., /blog/how-to-launch-a-startup)
	â€¢	Include meta title, description, and image for sharing
	â€¢	Structured data / OpenGraph tags for rich snippets

â¸»

ðŸ§± Recommended Tech Stack

Frontend
	â€¢	React or Next.js
	â€¢	Tailwind CSS (for design consistency and responsiveness)
	â€¢	Heroicons / Font Awesome (for social icons)
	â€¢	Framer Motion (for subtle animations)

Backend / CMS Options

Choose one:
	â€¢	Option A: Use Next.js + Sanity.io for a powerful, low-code CMS
	â€¢	Option B: Use Strapi (Node.js Headless CMS) + SQLite/PostgreSQL
	â€¢	Option C: Use Firebase for hosting, Firestore for content

Image Hosting
	â€¢	Use Cloudinary or Firebase Storage for easy uploads, CDN, and auto image optimization

Authentication (for Admin)
	â€¢	Firebase Auth (email login)
	â€¢	Or NextAuth.js (if using Next.js)

â¸»

ðŸ§ª Optional Enhancements
	â€¢	Show related posts under each article
	â€¢	Include newsletter signup (Mailchimp or ConvertKit integration)
	â€¢	Enable comments using a plug-in (like Disqus or custom comment system)
	â€¢	Add reading progress bar at the top
	â€¢	Dark/light mode toggle
