{
    "id": 8,
    "category": "Hiring",
    "title": "How to Build Effectively",
    "image": "https://geriasa.blob.core.windows.net/assets/blueprint.jpg",
    "previewText": "In this blog we are going to discuss two approaches to feature development. Horizontal delivery and vertical delivery.",
    "date": "Fri. 14th Feb. 2025.",
    "authorName": "Amy Hanuma",
    "authorAvatarUrl": "https://geriasa.blob.core.windows.net/assets/portrait1.jpg",
    "longText": "<div><h2>Ask yourself these questions:</h2><p>Is your team always busy but your users aren’t seeing any new features?</p><p>Have you ever worked hard on a feature only to be disappointed when you learn your users aren’t using it?</p><br><h2>Topic and purpose of this blog</h2><p>Today I want to help evaluate how we tackle our work when implementing features for your project.In this blog we are going to discuss two approaches to feature development. Horizontal delivery and vertical delivery.Vertical Delivery: This approach focuses on delivering complete, functional slices of a product that cut across all necessary layers—UI, backend, and database. Each increment provides real user value and can be tested end-to-end. This method aligns well with agile principles, allowing for faster feedback and iteration.Horizontal Delivery: This method builds software layer by layer, such as developing the entire database schema first, then the backend, and finally the UI. While it might seem organized, it often leads to delayed integration, increased rework, and a lack of early user feedback.</p><br><h3>A Short Story</h3>Say we are building a travel app, and you have a vision for how this app should look like. You might want the following features:<ul><li>A map to see taxis nearby</li><li>A list of reviews for restaurants nearby </li></ul>When your development team picks up these features, they realized that the location/tracking functionality in the Api and Database can be shared across both features.So, your first sprint towards this goal is aimed at implementing this functionality in your service and database layer. By the end of the sprint, you have integration test cases that look a bit like:<ul><li>‘Find all taxis method should return all taxis within specified area’</li><li>‘Find all restaurants method should return all restaurants within specified area’</li></ul>You start to feel good because it feels like you’re accomplishing something. As you worked on multiple features this sprint there simply wasn’t enough time to focus on the UI, so you will have to tackle it in the next sprint.<br><h3>The problem</h3><p>By focusing on how to develop all the features efficiently, we have broken some important agile principles!Agile principle no. 1:“Our highest priority is to satisfy the customerthrough early and continuous deliveryof valuable software.”In the first sprint we didn’t deliver anything a user could use and therefore our clients received no value. From a business perspective, it could mean we convert fewer clients.Agile principle no. 10:“Simplicity--the art of maximizing the amountof work not done--is essential.”By delaying instant feedback from the client. We become less confident that what we are building is of real value.That feedback is important because it can allow us to stop wasting time on irrelevant features and pivot towards more valuable ones.</p><br><h3>Introducing Vertical Delivery (The Solution)</h3><p>‘Vertically delivery’ is developing a feature that a customer can use in a single sprint.The work being done must only focus on the feature and nothing else. There can be no scope creep. Remember the 10th Agile principle. You are trying to maximize the work not done.In practice this will mean the development of the feature may touch multiple layers of an application, that may be the database, the API & the UI etc. Because you are integrating between the layers early on, you can address any integration issues immediately. With vertical delivery it could be weeks before you realize your UI and API don’t integrate well, further delaying your feature.The feature may or may not require more features be truly useful. However, this a piece of the system that can work on its own and importantly give value and receive feedback straight away.</p><br><h3>In summary you can expect:</h3><ul><li>Faster time to market</li><li>Better integration of tech stacklayers</li><li>Improved customer feedback loops</li></ul></div>"
}